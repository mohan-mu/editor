(self.webpackChunkeditor_demo=self.webpackChunkeditor_demo||[]).push([[7410],{97410:n=>{n.exports="import {AsyncPipe, NgForOf} from '@angular/common';\nimport {ChangeDetectionStrategy, Component, inject} from '@angular/core';\nimport {WINDOW} from '@ng-web-apis/common';\nimport {tuiPure} from '@taiga-ui/cdk';\nimport {\n    TuiButtonModule,\n    TuiDataListModule,\n    TuiHostedDropdownModule,\n} from '@taiga-ui/core';\nimport {TuiTiptapEditorService} from '@tinkoff/tui-editor';\nimport {distinctUntilChanged, map} from 'rxjs';\n\n@Component({\n    standalone: true,\n    selector: 'font-size-tool',\n    imports: [\n        TuiDataListModule,\n        NgForOf,\n        TuiButtonModule,\n        TuiHostedDropdownModule,\n        AsyncPipe,\n    ],\n    templateUrl: './font-size-tool.template.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ExampleTuiFontSizeToolComponent {\n    private readonly editor = inject(TuiTiptapEditorService);\n    private readonly win = inject(WINDOW);\n\n    readonly sizes = [8, 9, 10, 11, 12, 14, 16, 18, 24, 30];\n\n    readonly size$ = this.editor.stateChange$.pipe(\n        map(() => this.fontSize),\n        distinctUntilChanged(),\n    );\n\n    setFontSize(size: number): void {\n        this.editor.setFontSize(size);\n    }\n\n    get fontSize(): number {\n        return (\n            this.editor.getFontSize() ||\n            this.getDefaultFontSize(this.editor.getOriginTiptapEditor()?.view?.dom) ||\n            16\n        );\n    }\n\n    increase(): void {\n        const newIndex = this.currentIndex + 1;\n\n        if (newIndex <= this.sizes.length - 1) {\n            const newSize = this.sizes[newIndex];\n\n            this.setFontSize(newSize);\n        }\n    }\n\n    decrease(): void {\n        const newIndex = this.currentIndex - 1;\n\n        if (newIndex > 0) {\n            const newSize = this.sizes[newIndex];\n\n            this.setFontSize(newSize);\n        }\n    }\n\n    private get currentIndex(): number {\n        return this.sizes.indexOf(this.fontSize);\n    }\n\n    @tuiPure\n    private getDefaultFontSize(element: Element): number {\n        return Number(\n            this.win\n                .getComputedStyle(element)\n                .getPropertyValue('font-size')\n                .match(/\\d+/)?.[0],\n        );\n    }\n}\n"}}]);